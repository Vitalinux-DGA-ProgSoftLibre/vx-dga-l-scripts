#!/bin/bash
. /etc/default/vx-dga-variables/vx-dga-variables-general.conf
USER=$(whoami)
PDI=""
SB480=""
ARCHSO=$(getconf LONG_BIT)
SERVERDOWNLOAD="migasfree.educa.aragon.es"

function close_yad(){
    kill -s SIGUSR1 "$YAD_PID"
}
export -f close_yad

function log_xsession(){
#
# Funcion que loguea el proceso. Si no se pasa como parámetro el nombre del fichero, dejará un log en /tmp
# Si se quiere loguera en /var/log/vitalinux se llamará como log_xsession -o nombre_fichero
# 
	while getopts 'o:' OPT; do
        case $OPT in
            o) LOGFILE=$OPTARG;;
        esac
	done

	if [ "$LOGFILE" ] ; then
		if [ ! -d /var/log/vitalinux ]; then
			mkdir -p /var/log/vitalinux
		fi
		LOGFILE="/var/log/vitalinux/$LOGFILE"
	else
		LOGFILE="/tmp/logfile"
	fi
	export fpipe=$(mktemp -u --tmpdir yadlog.XXXXXXXX)
	mkfifo "$fpipe"
	exec 3<> "$fpipe"
	exec 2>&1
	exec > >(tee -i "$fpipe" >> "$LOGFILE" )
	# Borramos la pipe cuando salgamos
	trap "rm -f $fpipe" EXIT
	yad --title "Ventana de Log" --text-info --tail \
			--window-icon vitalinux \
			--center --width="720" --height="520" \
			--no-escape --no-focus --tail --button="Ocultar:bash -c close_yad" < "$fpipe" &

	YAD_LOG=$!
	export YAD_LOG
}

function close_exit(){
	echo "Se cancela el proceso por parte del usuario antes de tiempo"
    if [ -n "$YAD_LOG" ] && ps -p "$YAD_LOG" > /dev/null; then 
    	kill -s SIGUSR1 "$YAD_LOG"
    fi
    if [ -n "$YAD_PID" ] && ps -p "$YAD_PID" > /dev/null; then 
    	 kill -s SIGUSR1 "$YAD_PID"
    fi
    # Salimos del programa
    exit 1

}
export -f close_exit


function seleccionar-modelo-pdi {

	PDI=$(yad --center --width 300 --title "Seleccionar PDI" \
		--window-icon vitalinux \
		--image pdi \
		--button="Continuar":0 --button="Canelar":1 \
		--entry \
		--text "Selecciona tu PDI:" \
		--entry-text \
		"No driver" "eBeam" "Hitachi" "Interwrite" "IQBoard" "Multiclass" "Promethean" "Smartboard")
}

function comprobar-md5 {
	ARCHIVO=$1
	cd /opt/pkgs/pdis || return 1
	echo ""
	if test -f ./"${ARCHIVO}" -a -f ./"${ARCHIVO}".md5 ; then
		echo "Ya están descargados los archivos ${ARCHIVO} y ${ARCHIVO}.md5 ..."
		echo "----------------------------"
		md5sum "${ARCHIVO}"
		cat ./"${ARCHIVO}".md5
		if test "$(md5sum ${ARCHIVO})" == "$(cat ./${ARCHIVO}.md5)" ; then
			echo "--> Ok!! Coinciden el MD5 de ${ARCHIVO} con ${ARCHIVO}.md5 ..."
			echo "----------------------------"
	        echo ""
			return 0
		else
			echo "--> Error!! No coinciden el MD5 de ${ARCHIVO} con ${ARCHIVO}.md5 ..."
			echo "--> Se va a intentar volver a descargar los archivos ..."
			echo "----------------------------"
	        echo ""
			rm -Rf ./${ARCHIVO}* &> /dev/null
			return 1
		fi
	else
		echo "--> El archivo ${ARCHIVO} o su MD5 no existen.  Se descargarán de nuevo ..."
		rm -Rf ./${ARCHIVO}* &> /dev/null
		return 1
	fi
}

function descargar-archivos {
	YADBARS=""
	CONTADOR=1
	for ruta in $@ ; do
		# Obtenemos el nombre del archivo a descargar de la URL proporcionada
	  NOMBREARCHIVO=$(echo "$ruta" | awk -F "/" {'print $NF'})
	  YADBARS="$YADBARS --bar=Descargando->$NOMBREARCHIVO:NORM"
	  CONTADOR=$((CONTADOR + 1))
	done

	(
	CONTADOR=1
	for ruta in $@ ; do
		NOMBREARCHIVO=$(echo "$ruta" | awk -F "/" {'print $NF'})
		# Para cada barra de progreso: El primer parametro es la barra de progreso afectada y el segundo el texto que mostrará
		wget "$ruta" 2>&1 | sed -u \
		"s/.* \([0-9]\+%\)\ \+\([0-9,.]\+.\) \(.*\)/$CONTADOR:\1\n$CONTADOR:# Descargando a \2\/s, T. Restante: \3/"
		# Obtenemos el resultado de la descarga proporcionado por wget
		RET_WGET="${PIPESTATUS[0]}"
		if [[ "$RET_WGET" = 0 ]] ; then
			echo "$CONTADOR:100%"
			echo "$CONTADOR:#Descarga de $NOMBREARCHIVO Completada ..."
		else
			echo "$CONTADOR:#Error en la Descarga de $NOMBREARCHIVO ..."
		fi
		CONTADOR=$((CONTADOR + 1))
	done
	) | yad --center --width 700 \
		--title "Descarga de Drivers PDIs" \
		--window-icon vitalinux \
		--justify="center" --text-align="center" \
		--text "  Descargando el Software necesario ... <b>¡¡paciencia!!</b> ... \n  Puede tardar <b>Varios Minutos</b>  \n   Modelo PDI: <b>$PDI</b>   " \
		--multi-progress \
		$YADBARS \
		--auto-close --button="Cancelar":1
	##
	## Si el usuario cancela la descarga o bien hay un error (no hay red por ejemplo)
	if [ "$?" = "1" ] ; then
		if yad --center --title "Drivers PDIs" --question \
		--window-icon vitalinux \
		--image pdi \
		--text "   Hubo un problema a la hora de descargar el software o ha sido cancelada la operación por el usuario...deseas reintentar la descarga?   " \
		--width="350" --center \
		--justify="center" --text-align="center" \
		--button="Continuar":0 --button="Cancelar":1 ;  then
			
			descargar-archivos $@
			return $?
		else
			
			return 1
		fi 
	fi
	return 0

}

function comprobar-archivos {
	LISTADESCARGAS=""

	for RUTA in $@ ; do
		ARCHIVO=$(echo "$RUTA" | awk -F "/" {'print $NF'})
		if ! comprobar-md5 $ARCHIVO ; then
			echo "--> El archivo $ARCHIVO NO se encentra de manera integra en /opt/pkgs/pdis ..."
			echo "--> ... por lo tanto, $ARCHIVO se descargará a continuación ..."
			LISTADESCARGAS="$LISTADESCARGAS http://${SERVERDOWNLOAD}${RUTA} http://${SERVERDOWNLOAD}${RUTA}.md5"
		else
			echo "--> El archivo $ARCHIVO ya existe de manera integra en /opt/pkgs/pdis ..."
			echo "--> ... por lo tanto, $ARCHIVO no se descargará de nuevo ..."
		fi
	done
	if test "$LISTADESCARGAS" = "" ; then
		return 0
	else
		descargar-archivos "$LISTADESCARGAS"
	fi
}

# Los archivos a descargar y posteriormente a instalar no se pueden pasar por parámetro ya que luego es importante el orden o acciones posteriores...
function descargar-software-pdi {

	if ! test -d /opt/pkgs/pdis ; then
		mkdir -p /opt/pkgs/pdis
	fi
	cd /opt/pkgs/pdis

	case $PDI in

		"eBeam")
		if [ "$ARCHSO" = "64" ] ; then
			yad --title "Instalación de Software de la PDI $PDI" \
				--text " Lo sentimos pero de momento eBeam NO facilita controladores para 64 bits "\
				--window-icon vitalinux \
				--image pdi \
				--width="400" --height="100" \
				--center --justify="center" --text-align="center" --button="gtk-ok":0
			return 1
		fi
		## Test
		FILESPDI="/pdis/eBeam/eBeam-Interact_3.6-0_bionic_amd64.deb"
		;;

		"Hitachi") 
		## Test
		yad --title "Instalación de Software de la PDI $PDI" \
				--text " Las pizarras Hitachi no tienen drivers actualizados. Se recomienda usar Vitalinux 1.0 (32 o 64 bits) \n Sin embargo se intentará instalar dicho software..."\
				--window-icon vitalinux \
				--image pdi \
				--width="400" --height="100" \
				--center --justify="center" --text-align="center" \
				--button="gtk-ok":0 \
				--button="Salir":1
			if [ "$?" != "0" ]; then
				return 1
			fi
		FILESPDI="/pdis/HITACHI/StarBoardSoftware_9.62_i586.deb"
		;;

		"Interwrite")
		# Test
		FILESPDI="/pdis/Interwrite/WorkSpace_Ubuntu_6.5.0.24 \
		    /pdis/Interwrite/DeviceManager_Ubuntu_7.7.0.5"
		;;

		"IQBoard")
		## Test. Existe un modelo de software superior
			# Selecccionar el modelo de iqboard...sino se seleccionará el de infrarrojos 6 o 10 puntos
			MODELOIQ=$(yad --center --width 300 --title "Seleccionar PDI" \
			--window-icon vitalinux \
			--image pdi \
			--button="Continuar":0 --button="Canelar":1 \
			--entry \
			--text "Selecciona Modelo de pizarra IQ :" \
			--entry-text \
			"Resistiva_S080_S082" "Electromagnetica_AP080_AP082_APD080_APD082" "Infrarrojos_RPD082" \
			"Infrarrojos_6_10_toques_RPS082_RPT082" "Optica_T084_T082" "Optica_4_10_TQ082_TQ084_TN082_TN084"
			)
			[ "$MODELOIQ" = "" ] && return 1
			
			FILESPDI="/pdis/IQBoard/IQBoard_$ARCHSO/iqboard.deb /pdis/IQBoard/iqboard_driver_bionic/$MODELOIQ/x$ARCHSO/rsboardep.deb"
			
		;;

		"Multiclass")
		## Test.
			FILESPDI="/pdis/multiCLASS/multiCLASS_Book_Ubuntu_$ARCHSO.deb"
			# if [ "$ARCHSO" = "64" ] ; then
			#   FILESPDI="/pdis/multiCLASS/multiCLASS_Book_Ubuntu_64.deb"
			# else
			#   FILESPDI="/pdis/multiCLASS/multiCLASS_Book_Ubuntu_32.deb"
			# fi
		;;

		"Promethean")
		# Faltan 32 bits...de momento no se publica dicha versión
		if [ "$ARCHSO" = "64" ] ; then
		  FILESPDI="/pdis/Promethean/bionic/promethean64_bionic/activaid_2.0.1~Ubuntu~1804_amd64.deb \
			/pdis/Promethean/bionic/promethean64_bionic/activdriver_5.18.12-0~Ubuntu~1804_amd64.deb \
			/pdis/Promethean/bionic/promethean64_bionic/activinspire_2.17.68075-1.amd64_amd64.deb \
			/pdis/Promethean/bionic/promethean64_bionic/activinspire-32bitdependsfor64bit_2.17.68075-1.i386_i386.deb \
			/pdis/Promethean/bionic/promethean64_bionic/activinspire-help-es_1.0.2-14_all.deb \
			/pdis/Promethean/bionic/promethean64_bionic/activ-meta-es_2.0.0-71_amd64.deb \
			/pdis/Promethean/bionic/promethean64_bionic/activresources-core-es_1.0.1-147_all.deb \
			/pdis/Promethean/bionic/promethean64_bionic/activtools_5.18.12-0~Ubuntu~1804_amd64.deb"
		else
		  FILESPDI="/pdis/Promethean/xenial_last/promethean32_xenial/activaid_2.0.1~Ubuntu~1604_i386.deb \
		    /pdis/Promethean/xenial_last/promethean32_xenial/activhwr-es_1.0.1-79_all.deb \
		    /pdis/Promethean/xenial_last/promethean32_xenial/activinspire-help-es_1.0.2-14_all.deb \
		    /pdis/Promethean/xenial_last/promethean32_xenial/activtools_5.17.14-0~Ubuntu~1604_i386.deb \
		    /pdis/Promethean/xenial_last/promethean32_xenial/activdriver_5.17.14-0~Ubuntu~1604_i386.deb \
		    /pdis/Promethean/xenial_last/promethean32_xenial/activinspire_2.14.67304-1.i386_i386.deb
		    /pdis/Promethean/xenial_last/promethean32_xenial/activ-meta-es_2.0.0-71_i386.deb"
		fi
		;;

		"Smartboard")
		# Lo primero es saber si es una SmartBoard480 o no:
		if lsusb | grep "0b8c:0090" > /dev/null 2>&1 ; then
			SB480="1"
		else
			SB480="0"
		fi
		if [ "$ARCHSO" = "64" ] && [ "$SB480" = "1" ]  ; then
			yad --title "Instalación de Software de la PDI $PDI" \
				--text " Lo sentimos pero de momento SmartBoard NO facilita controladores para 64 bits "\
				--window-icon vitalinux \
				--image pdi \
				--width="400" --height="100" \
				--center --justify="center" --text-align="center" --button="gtk-ok":0
			return 1
		elif [ "$ARCHSO" = "64" ] ; then
			# Si la arquitectura es de 64 bits, pero no es la 480, podría funcionar el software...no lo sabemos
			yad --title "Instalación de Software de la PDI $PDI" \
				--text " Su sistema es de 64 bits. Es posible que el software que se instale no funcione adecuadamente...si es así hable con Soporte Vitalinux "\
				--window-icon vitalinux \
				--image pdi \
				--width="400" --height="100" \
				--center --justify="center" --text-align="center" \
				--button="Continuar instalación":0 \
				--button="Cancelar":1 \

			if [ "$?" != "0" ]; then
				return 1
			fi
		else
			# No sabemos si funcionará
			yad --title "Instalación de Software de la PDI $PDI" \
				--text " Su PDI parece ser una SmartBoard 480...pero no sabemos si la versión publicada sea compatible con Ubuntu bionic. Si tiene problemas contacte con Soporte Vitalinux "\
				--window-icon vitalinux \
				--image pdi \
				--width="400" --height="100" \
				--center --justify="center" --text-align="center" \
				--button="Continuar instalación manual":0 \
				--button="Cancelar":1 \

			if [ "$?" != "0" ]; then
				return 1
			fi
		fi

		FILESPDI="/pdis/SmartBoard/smart_board/nwfermi-0.6.5.1_i386.deb \
			/pdis/SmartBoard/smart_board/smart-activation_1.1.2066.1-1_i386.deb \
			/pdis/SmartBoard/smart_board/smart-common_10.3.2171.1-1_i386.deb \
			/pdis/SmartBoard/smart_board/smart-gallerysetup_1.3.6235.1-1_i386.deb \
			/pdis/SmartBoard/smart_board/smart-hwr_11.3.2121.1-1_i386.deb \
			/pdis/SmartBoard/smart_board/smart-languagesetup_2.2.2060.4-1_i386.deb \
			/pdis/SmartBoard/smart_board/smart-notebook_11.0.7511.0-1_i386.deb \
			/pdis/SmartBoard/smart_board/smart-product-drivers_11.3.2121.1-1_i386.deb \
			/pdis/SmartBoard/smart_board/xf86-input-nextwindow-trusty_0.3.4~trusty1_i386.deb"
		;;

	esac
	# Configuramos el servidor de donde se realizarán las descargas:
	echo "Comprobando servidor de descargas...por favor, espere"
	if ping -c 1 "$IPCACHE" &> /dev/null && wget --spider -q "http://${IPCACHE}/pdis" ; then
		SERVERDOWNLOAD="$IPCACHE"
		echo "Se usuará el servidor caché del centro"
	else
		SERVERDOWNLOAD="migasfree.educa.aragon.es"
		echo "Se usuará el servidor migasfree"
	fi
	
	comprobar-archivos "$FILESPDI"
}


function instalar-software-pdi {

	cd /opt/pkgs/pdis || return 1
	case $PDI in

	"eBeam")
		apt-get --assume-yes --force-yes install libusb-dev yasm libvpx. libx264. kazam onboard libboost-all-dev libboost-thread-dev
		dpkg -i eBeam-Interact_3.6-0_bionic_amd64.deb
		apt-get -f --assume-yes --force-yes install
	;;

	"Hitachi")
	if test -f ./StarBoardSoftware_9.62_i586.deb ; then
		if ! dpkg -l | grep -e "starboardsoftware[ ]*9.62" >/dev/null 2>/dev/null ; then
			dpkg -i /opt/pkgs/pdis/StarBoardSoftware_9.62_i586.deb
		else
			echo "El software para esta PDI esta actualizado a la ultima version...se omite su instalacion"
		fi
		/usr/local/StarBoardSoftware/install.sh
		apt-get -f --assume-yes --force-yes install
		# Instalamos los drivers necesarios
		# 1. El primero es para que el servicio que el demonio que se encarga de hablar con la pizarra (driver) DGBoard se pueda ejecutar en 64 bits
		apt-get --assume-yes --force-yes install libusb-0.1-4:i386 libxtst6-dbg:i386 libxtst6:i386
		# 2. lsadrv es el módulo del kernel que necesitan las FX77 Trio para funcionar. Aportado por la comunidad (no por HITACHI). Para las DUO no es neceario
		# pero tampoco molesta que se cargue en memoria
		dpkg -l | grep -e "vx-dga-l-lsadrv-hitachi" >/dev/null 2>/dev/null  && \
                        apt-get --assume-yes --force-yes purge vx-dga-l-lsadrv-hitachi
		apt-get --assume-yes --force-yes install vx-dga-l-lsadrv-hitachi
		# Modificamos el lanzador de calibrado que no se ejecuta correctamente desde entorno grafico
		if [ -f /usr/share/applications/hitachi-starboard-calibrate.desktop ] ; then
			sed -i 's/^Terminal=[Tt]rue/Terminal=false/g' /usr/share/applications/hitachi-starboard-calibrate.desktop
		fi

	fi
	;;

	"Interwrite")
	[ -f WorkSpace_Ubuntu_6.5.0.24 ] && \
		chmod +x WorkSpace_Ubuntu_6.5.0.24 && \
		  ./WorkSpace_Ubuntu_6.5.0.24
	[ -f DeviceManager_Ubuntu_7.7.0.5 ] && \
		chmod +x DeviceManager_Ubuntu_7.7.0.5 && \
		  ./DeviceManager_Ubuntu_7.7.0.5
	;;

	"IQBoard")
	# Cosultar en /var/lib/dpkg/info/iqboard.deb.postinst que hay acciones que no se pueden realizar
	if test -f ./iqboard.deb -a -f ./rsboardep.deb ; then
		# Borramos cualquier instalacion previa de drivers o software
		if dpkg -l | grep iqboard.deb >/dev/null 2>/dev/null ; then
			echo "Borrando software instalado..."
			dpkg -P iqboard.deb
		fi
		if dpkg -l | grep rsboard >/dev/null 2>/dev/null ; then
			echo "Borrando driver instalado..."
			dpkg -P rsboardep
		fi
		dpkg -i /opt/pkgs/pdis/rsboardep.deb
		dpkg -i /opt/pkgs/pdis/iqboard.deb
		if test -f /usr/share/gnome/autostart/RSBoardEPStart.desktop ; then
		  cp /usr/share/gnome/autostart/RSBoardEPStart.desktop /etc/xdg/autostart/
		fi

	fi
	;;

	"Multiclass")
	# Antiguos drivers de las pizarras multiclass...solo válido para las antiguas
	# En éste caso además se requiere instalación manual....
	# 	if test -f ./multiCLASSBoard.tar.gz ; then
	#	tar -xzvf /opt/pkgs/pdis/multiCLASSBoard.tar.gz
	#	cd /opt/pkgs/pdis/multiCLASSBoard/setup
	#	chmod +x ./setup.sh
	#	./setup.sh
	#	cd /opt/pkgs/pdis
	#fi
	if [ "$ARCHSO" = "64" ] ; then
	  dpkg -i /opt/pkgs/pdis/multiCLASS_Book_Ubuntu_64.deb
	else
	  dpkg -i /opt/pkgs/pdis/multiCLASS_Book_Ubuntu_32.deb
	fi

	;;

	"Promethean")

		dpkg -i /opt/pkgs/pdis/activ*.deb
		apt-get -f --assume-yes --force-yes install
	;;

	"Smartboard")
	dpkg -i /opt/pkgs/pdis/smart-activation_1.1.2066.1-1_i386.deb \
		/opt/pkgs/pdis/smart-common_10.3.2171.1-1_i386.deb \
		/opt/pkgs/pdis/smart-gallerysetup_1.3.6235.1-1_i386.deb \
		/opt/pkgs/pdis/smart-hwr_11.3.2121.1-1_i386.deb \
		/opt/pkgs/pdis/smart-languagesetup_2.2.2060.4-1_i386.deb \
		/opt/pkgs/pdis/smart-notebook_11.0.7511.0-1_i386.deb \
		/opt/pkgs/pdis/smart-product-drivers_11.3.2121.1-1_i386.deb
	if [ "$SB480" = "1" ]  ; then
		apt-get -y --force-yes install libc6-dev libc6 libc-dev-bin dkms
		dpkg -i /opt/pkgs/pdis/xf86-input-nextwindow-trusty_0.3.4~trusty1_i386.deb \
			/opt/pkgs/pdis/nwfermi-0.6.5.1_i386.deb
	fi
	apt-get -f --assume-yes --force-yes install
	;;

	esac

	# Por último instalamos el open-boad/open-sankore
	if yad --center --title "Drivers PDIs" --question \
		--window-icon vitalinux \
		--image pdi \
		--text "   Deseas (se recomienda) instalar <b>Open-Board(64bits recomendado)/Open-Sankore</b>   " \
		--width="350" --center \
		--justify="center" --text-align="center" \
		--button="Continuar":0 --button="Cancelar":1 ;  then

		cd /opt/pkgs/pdis || return 1

		# Descargamos el Open-Sankore
		if [ "$ARCHSO" = "64" ] ; then
			comprobar-archivos "/pdis/openboard_ubuntu_14.04_1.3.4_amd64.deb"
			dpkg -i /opt/pkgs/pdis/openboard_ubuntu_14.04_1.3.4_amd64.deb
			apt-get -f --assume-yes --force-yes install
		else
			comprobar-archivos "/pdis/Open-Sankore_2.5.1_i386.deb"
			dpkg -i /opt/pkgs/pdis/Open-Sankore_2.5.1_i386.deb
			apt-get -f --assume-yes --force-yes install
		fi

	fi

}

if test "$USER" != "root" ; then
	yad --title "Instalación del Software de PDIs" \
			--center --justify="center" --text-align="center" \
			--width="400" --height="100" \
			--window-icon vitalinux \
			--text "No tiene permiso para ejecutar el programa" \
			--button="Continuar":1
	exit 1
fi

if [ "$ARCHSO" != "32" ] && [ "$ARCHSO" != "64" ] ; then
	yad --title "Instalación del Software de PDIs" \
			--center --justify="center" --text-align="center" \
			--width="400" --height="100" \
			--window-icon vitalinux \
			--text "Error a la hora de conocer arquitectura del sistema. No se puede continuar..." \
			--button="Continuar":1
	exit 1
fi

log_xsession -o drivers-pdis

yad --center --title "Drivers PDIs" --question \
	--window-icon vitalinux \
	--image pdi \
	--on-top \
	--text "   ¿Desea continuar con la Instalación de <b>Drivers para las PDIs</b>?   \n   Para no demorar la instalación es aconsejable contar con un servidor caché, pero es posible realizar la descarga directamente desde Internet   " \
	--width="350" --height="50" --center \
	--justify="center" --text-align="center" \
	--button="gtk-ok":0 \
	--button="Salir":1
if [ "$?" != "0" ]; then
	close_exit
fi

seleccionar-modelo-pdi && descargar-software-pdi && instalar-software-pdi


yad --title "Instalación de Software de la PDI $PDI" \
	 --text "   Ya se han realizado todas las tareas solicitadas   \n   Si no se han detectado errores o se ha cancelado la operación, debería estar todo configurado... "\
	--window-icon vitalinux \
	--image pdi \
	--width="400" --height="100" \
	--center --justify="center" --text-align="center" --button="gtk-ok":0
 if [ -n "$YAD_LOG" ] && ps -p "$YAD_LOG" > /dev/null; then 
    	kill -s SIGUSR1 "$YAD_LOG"
 fi
 exit 0
