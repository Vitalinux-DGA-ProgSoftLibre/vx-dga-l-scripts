#!/bin/bash
. /etc/default/vx-dga-variables/vx-dga-variables-general.conf
USER=$(whoami)
PDI=""
SB480=""
ARCHSO=$(getconf LONG_BIT)
SERVERDOWNLOAD="migasfree.educa.aragon.es"

function close_yad(){
    kill -s SIGUSR1 "$YAD_PID"
}
export -f close_yad

function log_xsession(){
#
# Funcion que loguea el proceso. Si no se pasa como parámetro el nombre del fichero, dejará un log en /tmp
# Si se quiere loguera en /var/log/vitalinux se llamará como log_xsession -o nombre_fichero
# 
	while getopts 'o:' OPT; do
        case $OPT in
            o) LOGFILE=$OPTARG;;
        esac
	done

	if [ "$LOGFILE" ] ; then
		if [ ! -d /var/log/vitalinux ]; then
			mkdir -p /var/log/vitalinux
		fi
		LOGFILE="/var/log/vitalinux/$LOGFILE"
	else
		LOGFILE="/tmp/logfile"
	fi
	export fpipe=$(mktemp -u --tmpdir yadlog.XXXXXXXX)
	mkfifo "$fpipe"
	exec 3<> "$fpipe"
	exec 2>&1
	exec > >(tee -i "$fpipe" >> "$LOGFILE" )
	# Borramos la pipe cuando salgamos
	trap "rm -f $fpipe" EXIT
	yad --title "Ventana de Log" --text-info --tail \
			--window-icon vitalinux \
			--center --width="720" --height="520" \
			--no-escape --no-focus --tail --button="Ocultar:bash -c close_yad" < "$fpipe" &

	YAD_LOG=$!
	export YAD_LOG
}

function close_exit(){
	echo "Se cancela el proceso por parte del usuario antes de tiempo"
    if [ -n "$YAD_LOG" ] && ps -p "$YAD_LOG" > /dev/null; then 
    	kill -s SIGUSR1 "$YAD_LOG"
    fi
    if [ -n "$YAD_PID" ] && ps -p "$YAD_PID" > /dev/null; then 
    	 kill -s SIGUSR1 "$YAD_PID"
    fi
    # Salimos del programa
    exit 1

}
export -f close_exit

function esperando(){
	# Función que permite mostrar algo en pantalla mientras se espera la ejcución de un comando "largo"
	# Para llamarlo, lanzar el proceso largo con & y así se captura aquí...
	pid=$! # Get PID of background command
	while kill -0 $pid 2>/dev/null  # Signal 0 just tests whether the process exists
	do
		echo -n "."
		sleep 1.5
	done
	echo ""
}


function seleccionar-modelo-pdi {

	PDI=$(yad --center --width 300 --title "Seleccionar PDI" \
		--window-icon vitalinux \
		--image pdi \
		--entry \
		--text "Selecciona tu PDI:" \
		--entry-text \
		"Sin Driver - Solo OpenBoard" "eBeam" "Hitachi" "Interwrite" "IQBoard" "Multiclass" "Promethean" "Smartboard" \
		--button="Continuar":0 \
		--button="Cancelar":1
		)
	if [ "$?" != "0" ]; then
		return 69
	fi
}

function comprobar-md5 {
	ARCHIVO=$1
	cd /opt/pkgs/pdis || return 1
	echo ""
	if test -f ./"${ARCHIVO}" -a -f ./"${ARCHIVO}".md5 ; then
		echo "Ya están descargados los archivos ${ARCHIVO} y ${ARCHIVO}.md5 ..."
		echo "----------------------------"
		md5sum "${ARCHIVO}"
		cat ./"${ARCHIVO}".md5
		if test "$(md5sum ${ARCHIVO})" == "$(cat ./${ARCHIVO}.md5)" ; then
			echo "--> Ok!! Coinciden el MD5 de ${ARCHIVO} con ${ARCHIVO}.md5 ..."
			echo "----------------------------"
	        echo ""
			return 0
		else
			echo "--> Error!! No coinciden el MD5 de ${ARCHIVO} con ${ARCHIVO}.md5 ..."
			echo "--> Se va a intentar volver a descargar los archivos ..."
			echo "----------------------------"
	        echo ""
			rm -Rf ./${ARCHIVO}* &> /dev/null
			return 1
		fi
	else
		echo "--> El archivo ${ARCHIVO} o su MD5 no existen.  Se descargarán de nuevo ..."
		rm -Rf ./${ARCHIVO}* &> /dev/null
		return 1
	fi
}

function descargar-archivos {
	YADBARS=""
	CONTADOR=1
	for ruta in $@ ; do
		# Obtenemos el nombre del archivo a descargar de la URL proporcionada
	  NOMBREARCHIVO=$(echo "$ruta" | awk -F "/" {'print $NF'})
	  YADBARS="$YADBARS --bar=Descargando->$NOMBREARCHIVO:NORM"
	  CONTADOR=$((CONTADOR + 1))
	done

	(
	CONTADOR=1
	for ruta in $@ ; do
		NOMBREARCHIVO=$(echo "$ruta" | awk -F "/" {'print $NF'})
		# Para cada barra de progreso: El primer parametro es la barra de progreso afectada y el segundo el texto que mostrará
		wget "$ruta" 2>&1 | sed -u \
		"s/.* \([0-9]\+%\)\ \+\([0-9,.]\+.\) \(.*\)/$CONTADOR:\1\n$CONTADOR:# Descargando a \2\/s, T. Restante: \3/"
		# Obtenemos el resultado de la descarga proporcionado por wget
		RET_WGET="${PIPESTATUS[0]}"
		if [[ "$RET_WGET" = 0 ]] ; then
			echo "$CONTADOR:100%"
			echo "$CONTADOR:#Descarga de $NOMBREARCHIVO Completada ..."
		else
			echo "$CONTADOR:#Error en la Descarga de $NOMBREARCHIVO ..."
		fi
		CONTADOR=$((CONTADOR + 1))
	done
	) | yad --center --width 700 \
		--title "Descarga de Drivers PDIs" \
		--window-icon vitalinux \
		--justify="center" --text-align="center" \
		--text "  Descargando el Software necesario ... <b>¡¡paciencia!!</b> ... \n  Puede tardar <b>Varios Minutos</b>  \n   Modelo PDI: <b>$PDI</b>   " \
		--multi-progress \
		$YADBARS \
		--auto-close --button="Cancelar":1
	##
	## Si el usuario cancela la descarga o bien hay un error (no hay red por ejemplo)
	if [ "$?" = "1" ] ; then
		if yad --center --title "Drivers PDIs" --question \
		--window-icon vitalinux \
		--image pdi \
		--text "   Hubo un problema a la hora de descargar el software o ha sido cancelada la operación por el usuario...deseas reintentar la descarga?   " \
		--width="350" --center \
		--justify="center" --text-align="center" \
		--button="Continuar":0 --button="Cancelar":1 ;  then	
			descargar-archivos $@
			return $?
		else
			
			return 69
		fi 
	fi
	return 0

}

function comprobar-archivos {
	LISTADESCARGAS=""

	for RUTA in $@ ; do
		ARCHIVO=$(echo "$RUTA" | awk -F "/" {'print $NF'})
		if ! comprobar-md5 $ARCHIVO ; then
			echo "--> El archivo $ARCHIVO NO se encentra de manera integra en /opt/pkgs/pdis ..."
			echo "--> ... por lo tanto, $ARCHIVO se descargará a continuación ..."
			LISTADESCARGAS="$LISTADESCARGAS http://${SERVERDOWNLOAD}${RUTA} http://${SERVERDOWNLOAD}${RUTA}.md5"
		else
			echo "--> El archivo $ARCHIVO ya existe de manera integra en /opt/pkgs/pdis ..."
			echo "--> ... por lo tanto, $ARCHIVO no se descargará de nuevo ..."
		fi
	done
	if test "$LISTADESCARGAS" = "" ; then
		return 0
	else
		descargar-archivos "$LISTADESCARGAS"
	fi
}

# Los archivos a descargar y posteriormente a instalar no se pueden pasar por parámetro ya que luego es importante el orden o acciones posteriores...
function descargar-software-pdi {

	if ! test -d /opt/pkgs/pdis ; then
		mkdir -p /opt/pkgs/pdis
	fi
	cd /opt/pkgs/pdis

	case $PDI in

		"eBeam")
		## Test
			if [ "$ARCHSO" = "32" ] ; then
				yad --title "Instalación de Software de la PDI $PDI" \
					--text " Lo sentimos pero de momento eBeam NO facilita controladores para 32 bits "\
					--window-icon vitalinux \
					--image pdi \
					--width="400" --height="100" \
					--center --justify="center" --text-align="center" --button="gtk-ok":0
				return 1
			fi
			FILESPDI="/pdis/eBeam/eBeam-Interact_3.6.0-5_bionic_amd64.deb"
		;;

		"Hitachi") 
			if lsusb | grep "1477:0008" > /dev/null 2>&1 ; then
				HITACHITRIO="1"
				yad --title "Instalación de Software de la PDI $PDI" \
					--text " La pizarra conectada parece que es un modelo <b>HITACHI TRIO</b>.\n\n Si no es así, cancela la operación, conecta la pizarra y vuelve a arrancar el instalador.\n\n La instalación implica un proceso de descarga que puede ser costoso en tiempo: Se recomienda tener conexión a red por cable " \
					--window-icon vitalinux \
					--image pdi \
					--width="400" --height="100" \
					--center --justify="center" --text-align="center" \
					--button="Continuar":0 \
					--button="Salir":1
				if [ "$?" != "0" ]; then
					return 69
				fi
			else
				HITACHITRIO="0"
				yad --title "Instalación de Software de la PDI $PDI" \
					--text " La pizarra conectada parece que NO es un modelo <b>HITACHI TRIO</b>.\n\n Puede ser una <b>HITACHI DUO</b> o la nueva <b>FX79</b>\n\n Si no es así, cancela la operación, conecta la pizarra y vuelve a arrancar el instalador " \
					--window-icon vitalinux \
					--image pdi \
					--width="400" --height="100" \
					--center --justify="center" --text-align="center" \
					--button="Continuar":0 \
					--button="Salir":1
				if [ "$?" != "0" ]; then
					return 69
				fi
			fi
			#FILESPDI="/pdis/HITACHI/StarBoardSoftware_9.63_ubuntu16_amd64.deb"
		;;

		"Interwrite")
			yad --title "Instalación de Software de la PDI $PDI" \
					--text " Las pizarras Interwrite requieren dockerizar la aplicación para que funcionen. Ésto implica un proceso de descarga que es <b>costoso en tiempo</b>:\n\n Se recomienda tener conexión a <b>red por cable</b> antes de continuar... "\
					--window-icon vitalinux \
					--image pdi \
					--width="400" --height="100" \
					--center --justify="center" --text-align="center" \
					--button="Continuar ":0 \
					--button="Salir":1
			if [ "$?" != "0" ]; then
				return 69
			fi
		;;

		"IQBoard")
		## Test. Existe un modelo de software superior
			# Selecccionar el modelo de iqboard...sino se seleccionará el de infrarrojos 6 o 10 puntos
			MODELOIQ=$(yad --center --width 300 --title "Seleccionar PDI" \
			--window-icon vitalinux \
			--image pdi \
			--button="Continuar":0 --button="Canelar":1 \
			--entry \
			--text "Selecciona Modelo de pizarra IQ :" \
			--entry-text \
			"Resistiva_S080_S082" "Electromagnetica_AP080_AP082_APD080_APD082" "Infrarrojos_RPD082" \
			"Infrarrojos_6_10_toques_RPS082_RPT082" "Optica_T084_T082" "Optica_4_10_TQ082_TQ084_TN082_TN084"
			)
			[ "$MODELOIQ" = "" ] && return 1
			
			FILESPDI="/pdis/IQBoard/iqboard_${ARCHSO}_soft_bionic/iqboard.deb /pdis/IQBoard/iqboard_driver_bionic/${MODELOIQ}/x${ARCHSO}/rsboardep.deb"
			
		;;

		"Multiclass")
			yad --title "Instalación de Software de la PDI $PDI" \
				--text " Las pizarras Multiclass son funcionales para VX-2.0 (driver) pero no la Aplicación.\n Deberás usar openboard por ejemplo (el asistente te permitirá instalarlo después si lo deseas).\n\n Recuerda que para <b>calibrar</b> la pizarra es necesario usar la aplicación llamada <b>iwbdriver</b>. Más información en la <a href='https://wiki.vitalinux.educa.aragon.es/index.php/Vitalinux/Pizarras_Digitales_Interactivas#Multiclass'>wiki de Vitalinux</a> "\
				--window-icon vitalinux \
				--image pdi \
				--width="400" --height="100" \
				--center --justify="center" --text-align="center" \
				--button="Continuar ":0 \
				--button="Cancelar":1
			if [ "$?" != "0" ]; then
				return 69
			fi
			FILESPDI="/pdis/multiCLASS/multiCLASS_Book_Ubuntu_$ARCHSO.deb"
		;;

		"Promethean")
		# Faltará 32 bits...de momento no se publica dicha versión
			if [ "$ARCHSO" = "32" ] ; then
				yad --title "Instalación de Software de la PDI $PDI" \
					--text " Lo sentimos pero de momento NO se da soporte a Promethean 32 bits "\
					--window-icon vitalinux \
					--image pdi \
					--width="400" --height="100" \
					--center --justify="center" --text-align="center" --button="gtk-ok":0
				return 1
			fi
		;;

		"Smartboard")
		# La solución ahora se basa en aplicación dockerizada por Lliurex
		# Ojo, SOLO 64 bits. Suponemos que los paquetes de 32 habría que probar, pero de momento no hay ARC-32
			yad --title "Instalación de Software de la PDI $PDI" \
				--text " Las pizarras SmartBoard requieren dockerizar la aplicación para que funcionen. Ésto implica un proceso de descarga que es <b>costoso en tiempo</b>:\n\n Se recomienda tener conexión a <b>red por cable</b> antes de continuar...  "\
				--window-icon vitalinux \
				--image pdi \
				--width="400" --height="100" \
				--center --justify="center" --text-align="center" \
				--button="Continuar ":0 \
				--button="Cancelar":1
			if [ "$?" != "0" ]; then
				return 69
			fi
		
		;;

	esac
	# Configuramos el servidor de donde se realizarán las descargas:
	echo "Comprobando servidor de descargas...por favor, espere"
	if ping -c 1 "$IPCACHE" &> /dev/null && wget --spider -q "http://${IPCACHE}/pdis" ; then
		SERVERDOWNLOAD="$IPCACHE"
		echo "Se usuará el servidor caché del centro"
	else
		SERVERDOWNLOAD="migasfree.educa.aragon.es"
		echo "Se usuará el servidor migasfree"
	fi
	
	comprobar-archivos "$FILESPDI"
}


function instalar-software-pdi {

	cd /opt/pkgs/pdis || return 1
	case $PDI in

	"eBeam")
		apt-get --assume-yes --force-yes install libusb-dev yasm libvpx. libx264. kazam onboard libboost-all-dev libboost-thread-dev
		dpkg -i eBeam-Interact_3.6.0-5_bionic_amd64.deb
		apt-get -f --assume-yes --force-yes install
	;;

	"Hitachi")
		if [ "$HITACHITRIO" = "1" ]  ; then
			apt-get --assume-yes --force-yes install vx-dga-l-pdi-starboard-hitachitrio
			# Los drivers necesarios ya vienen como dependencia del paquete anterior
			echo "Descargando la imagen docker de la aplicación...PACIENCIA y ESPERA A QUE SE INDIQUE"
			sudo /usr/bin/vx-starboard -download &
			esperando
		else
			apt-get --assume-yes --force-yes install starboardsoftware
			# Instalamos los drivers necesarios
			# 1. El primero es para que el servicio que el demonio que se encarga de hablar con la pizarra (driver) DGBoard se pueda ejecutar en 64 bits
			apt-get --assume-yes --force-yes install libusb-0.1-4:i386 libxtst6-dbg:i386 libxtst6:i386
			# 2. lsadrv es el módulo del kernel que necesitan las FX77 Trio para funcionar. Aportado por la comunidad (no por HITACHI). Para las DUO no es neceario
			# pero tampoco molesta que se cargue en memoria. Hacemos una reinstalación por si acaso...
			#dpkg -l | grep -e "vx-dga-l-lsadrv-hitachi" >/dev/null 2>/dev/null  && \
			#	apt-get --assume-yes --force-yes purge vx-dga-l-lsadrv-hitachi
			#apt-get --assume-yes --force-yes install vx-dga-l-lsadrv-hitachi
			
			# Por último, debemos activar el servicio de starboard (no lo hace por defecto) al arranque. 
			# Al estar mal construido el paquete 
			sed -i 's/# chkconfig/### BEGIN INIT INFO\n# Default-Start: 2 3 4 5\n### END INIT INFO/g' /etc/init.d/starboardservice
			systemctl enable starboardservice
			# Modificamos el lanzador de calibrado que no se ejecuta correctamente desde entorno grafico
			if [ -f /usr/share/applications/hitachi-starboard-calibrate.desktop ] ; then
				sed -i 's/^Terminal=[Tt]rue/Terminal=false/g' /usr/share/applications/hitachi-starboard-calibrate.desktop
			fi
		fi
	;;

	"Interwrite")
		apt-get --assume-yes install vx-dga-l-pdi-interwrite
		# Precarga de la imagen...
		echo "Descargando la imagen docker de la aplicación...PACIENCIA y ESPERA A QUE SE INDIQUE"
		sudo /usr/bin/vx-interwrite -download &
		esperando
	;;

	"IQBoard")
		# Cosultar en /var/lib/dpkg/info/iqboard.deb.postinst que hay acciones que no se pueden realizar
		if test -f ./iqboard.deb -a -f ./rsboardep.deb ; then
			# Borramos cualquier instalacion previa de drivers o software
			if dpkg -l | grep iqboard.deb >/dev/null 2>/dev/null ; then
				echo "Borrando software instalado..."
				dpkg -P iqboard.deb
			fi
			if dpkg -l | grep rsboard >/dev/null 2>/dev/null ; then
				echo "Borrando driver instalado..."
				dpkg -P rsboardep
			fi
			# iqboard depende de la librería libpng version 12, pero no está indicada la dependencia
			apt-get --assume-yes install libpng12-0
			dpkg -i /opt/pkgs/pdis/rsboardep.deb
			dpkg -i /opt/pkgs/pdis/iqboard.deb
			# El service también podría ser RSBoardEP_Server.desktop
			[ -f /usr/share/gnome/autostart/RSBoardEPStart.desktop ] && \
			  cp /usr/share/gnome/autostart/RSBoardEPStart.desktop /etc/xdg/autostart/

		fi
	;;

	"Multiclass")
		if [ "$ARCHSO" = "64" ] ; then
		dpkg -i /opt/pkgs/pdis/multiCLASS_Book_Ubuntu_64.deb
		else
		dpkg -i /opt/pkgs/pdis/multiCLASS_Book_Ubuntu_32.deb
		fi

	;;

	"Promethean")

		# Primero instalamos los complementos de drivers gráficos necesarios para que no haga downgrade
		apt-get --assume-yes install xserver-xorg-input-evdev-hwe-18.04
		
		apt-get --assume-yes install activdriver activtools activ-meta-es
	;;

	"Smartboard")
		# Install nwfermi daemon y module
		apt-get --assume-yes install nwfermi-module nwfermi-daemon
		# Install vx-dga-l-pdi-smartboard
		apt-get --assume-yes install vx-dga-l-pdi-smartboard
		# Precarga de la imagen...
		echo "Descargando la imagen docker de la aplicación...PACIENCIA y ESPERA A QUE SE INDIQUE"
		sudo /usr/bin/lliurex-smart -download &
		esperando

		if lsusb | grep "0b8c:0090" > /dev/null 2>&1 ; then
			SB480="1"
		else
			SB480="0"
		fi
		if [ "$SB480" = "1" ]  ; then
			# Avisar de que se deben seguir las instrucciones para que funcione
			yad --title "Instalación de Software de la PDI $PDI" \
			--text " Tu pizarra es la S480. Puede requerir las siguientes acciones para funcionar:\n
			   Navega hasta las Opciones y \n \
			   -> Configuración del ratón y movimiento\n \
			   - Habilita modo de uso simultáneo del ratón\n \
			   - Deshabilita la Función de uso único del ratón\n \
			   - Deshabilita los mensajes emergentes "\
			--window-icon vitalinux \
			--image pdi \
			--width="400" --height="100" \
			--center --justify="center" --text-align="center" \
			--button="OK":0
		fi
	;;

	esac

	# Por último instalamos el open-boad/open-sankore
	# De momento no se puede, la última versión disponible (xenial), tiene problemas de dependencias...:-(
	if ! dpkg -l | grep -q openboard 2>/dev/null && yad --center --title "Drivers PDIs" --question \
		--window-icon vitalinux \
		--image pdi \
		--text "   Deseas instalar <b>Open-Board(64 bits)/Open-Sankore(32 bits))</b>   " \
		--width="350" --center \
		--justify="center" --text-align="center" \
		--button="Continuar":0 --button="Cancelar":69 ;  then

		cd /opt/pkgs/pdis || return 1

		# Descargamos el OpenBoard....parece que necesita lo primero instalar (no es capaz de hacerlo con el -f install) el siguiente paquete:
	    apt-get --assume-yes install libqt5multimedia5-plugins libqt5script5 || return 1
		if [ "$ARCHSO" = "64" ] ; then
			comprobar-archivos "/pdis/openboard_ubuntu_18.04_1.5.3_amd64.deb"
			dpkg -i /opt/pkgs/pdis/openboard_ubuntu_18.04_1.5.3_amd64.deb
			apt-get -f --assume-yes --force-yes install
		else
			comprobar-archivos "/pdis/Open-Sankore_2.5.1_i386.deb"
			dpkg -i /opt/pkgs/pdis/Open-Sankore_2.5.1_i386.deb
			apt-get -f --assume-yes --force-yes install
		fi

	fi

}

if test "$USER" != "root" ; then
	yad --title "Instalación del Software de PDIs" \
			--center --justify="center" --text-align="center" \
			--width="400" --height="100" \
			--window-icon vitalinux \
			--text "No tiene permiso para ejecutar el programa" \
			--button="Continuar":1
	exit 1
fi

if [ "$ARCHSO" != "32" ] && [ "$ARCHSO" != "64" ] ; then
	yad --title "Instalación del Software de PDIs" \
			--center --justify="center" --text-align="center" \
			--width="400" --height="100" \
			--window-icon vitalinux \
			--text "Error a la hora de conocer arquitectura del sistema. No se puede continuar..." \
			--button="Continuar":1
	exit 1
fi

log_xsession -o drivers-pdis.log

yad --center --title "Drivers PDIs" --question \
	--window-icon vitalinux \
	--image pdi \
	--on-top \
	--text "   ¿Desea continuar con la Instalación de <b>Drivers para las PDIs</b>?   \n   Para no demorar la instalación es aconsejable contar con un servidor caché, pero es posible realizar la descarga directamente desde Internet   " \
	--width="350" --height="50" --center \
	--justify="center" --text-align="center" \
	--button="gtk-ok":0 \
	--button="Salir":1
if [ "$?" != "0" ]; then
	close_exit
fi

seleccionar-modelo-pdi && descargar-software-pdi && instalar-software-pdi
RESUL="$?"
## RESUL 69 es cancelación...pero no lo informamos....
if [ "${RESUL}" != "0" ] &&  [ "${RESUL}" != "69" ] ; then
	yad --title "Instalación de Software de la PDI $PDI" \
	 --text "   Algo ha podido salir mal   \n   Revise la ventana de logs para poder detectar el problema. \n\n Puede solicitar ayuda mandano un mail a soporte.vitalinux@educa.aragon.es adjuntando el texto de la traza  "\
	--window-icon vitalinux \
	--image pdi \
	--width="400" --height="100" \
	--center --justify="center" --text-align="center" --button="gtk-ok":0
else 
	yad --title "Instalación de Software de la PDI $PDI" \
	 --text "   Ya se han realizado todas las tareas solicitadas   \n   Recuerde que es posible que sea necesario un <b>reinicio del sistema</b> "\
	--window-icon vitalinux \
	--image pdi \
	--width="400" --height="100" \
	--center --justify="center" --text-align="center" --button="gtk-ok":0
fi


if [ -n "$YAD_LOG" ] && ps -p "$YAD_LOG" > /dev/null; then 
   	kill -s SIGUSR1 "$YAD_LOG"
fi
exit 0
